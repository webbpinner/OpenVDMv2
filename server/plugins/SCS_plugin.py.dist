# =================================================================================== #
#
#         FILE:  SCS_dashboardData.py
#
#        USAGE:  SCS_dashboardData.py [-h] [--dataType] <dataFile>
#
#  DESCRIPTION:  This python script interprets raw files created by the SCS Data
#                Acquision System.  Depending on the command-line arguments, the script
#                returns the data type of the file or a sub-sampled and json-formatted
#                version of the original file to stdout.  The json-formatted file is
#                used by OpenVDM as part of it's Data dashboard. 
#
#      OPTIONS:  [-h] Return the help message.
#                [--dataType] Return the datatype of the file as defined in the
#                    fileTypeFilter array.
#                <dataFile> Full or relative path of the data file to process.
#
# REQUIREMENTS:  python2.7, Python Modules: sys, os, time, argparse, json, fnmatch, csv
#
#         BUGS:
#        NOTES:
#       AUTHOR:  Webb Pinner
#      COMPANY:  Capable Solutions
#      VERSION:  1.0
#      CREATED:  2016-10-23
#     REVISION:  2016-12-29
#
# LICENSE INFO:  Open Vessel Data Management 2.2 (OpenVDMv2)
#                Copyright (C) 2017 OceanDataRat.org
#
#    This program is free software: you can redistribute it and/or modify it under the
#    terms of the GNU General Public License as published by the Free Software
#    Foundation, either version 3 of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful, but WITHOUT ANY
#    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#    PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License #    along with
#    this program.  If not, see <http://www.gnu.org/licenses/>.
#
# =================================================================================== #

import sys
import os
import json
import fnmatch
import argparse
import logging

from os.path import dirname, realpath
sys.path.append(dirname(dirname(dirname(realpath(__file__)))))

from server.plugins.parsers.gga_parser import GGAParser
from server.plugins.parsers.met_parser import METParser
from server.plugins.parsers.svp_parser import SVPParser
from server.plugins.parsers.tsg_parser import TSGParser
from server.plugins.parsers.twind_parser import TWINDParser

# -------------------------------------------------------------------------------------
# This array defines the various dataTypes collected by SCS and the cooresponding file
# regex expression.
# -------------------------------------------------------------------------------------
fileTypeFilters = [
    {"dataType":"gga",       "regex": "*Seapath_1_GGA_*.Raw",   "parser": "GGA",    'parser_options':{}},
    {"dataType":"vtg",       "regex": "*Seapath_1_VTG_*.Raw",   "parser": "VTG",    'parser_options':{}},
]

# -------------------------------------------------------------------------------------
# Function to determine the datatype of the raw datafile.  If the datatype can not be
# determined, the function returns false
# -------------------------------------------------------------------------------------
def getDataType(filePath):

    for fileTypeFilter in fileTypeFilters:
        if fnmatch.fnmatch(filePath, fileTypeFilter['regex']):
            return fileTypeFilter['dataType']

    return None


# -------------------------------------------------------------------------------------
# Function to determine the parser to use with the raw datafile.  If the datatype can
# not be determined, the function returns false
# -------------------------------------------------------------------------------------
def getParser(filePath):

    fileTypeFilter = list(filter(lambda fileTypeFilter: fnmatch.fnmatch(filePath, fileTypeFilter['regex']), fileTypeFilters))

    if len(fileTypeFilter) == 0:
        return None
    else:
        fileTypeFilter = fileTypeFilter[0]

    if fileTypeFilter['parser'] == "GGA":
        return GGAParser(**fileTypeFilter['parser_options'])
    elif fileTypeFilter['parser'] == "VTG":
        return VTGParser(**fileTypeFilter['parser_options'])
    else:
        return None

    
# -------------------------------------------------------------------------------------
# Function to process the raw datafile and return a json-formatted representation.  If
# the datatype can not be determined, the function returns false.  With collection 
# systems that contain multiple dataTypes, this function may route the raw datafile to
# a dataType-specific processing sub-routine. 
# -------------------------------------------------------------------------------------
def getJsonObj(filePath):

    parser = getParser(filePath)
    
    if parser is None:
        return False

    parser.process_file(filePath)

    return parser.toJSON()     
    # return {'error': 'Unknown parsing error in ' + filePath + ' occurred<br>Command: ' + s.join(command)}


# -------------------------------------------------------------------------------------
# Main function of the script should it be run as a stand-alone utility.
# -------------------------------------------------------------------------------------
def main(argv):

    parser = argparse.ArgumentParser(description='OpenVDM plugin for SCS')
    parser.add_argument('--dataType', action='store_true',
                        help='return the dataType of the file')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('dataFile', metavar='dataFile',
                        help='the raw data file to process')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).
    
    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    if not os.path.isfile(parsed_args.dataFile):
        logging.error("File not found")
        sys.exit(1)
    elif os.stat(parsed_args.dataFile).st_size == 0:
        logging.warning("File is empty")
    elif parsed_args.dataType:
        dataType = getDataType(parsed_args.dataFile)
        if dataType is None:
            logging.warning("File is of unknown type")
            sys.exit(1)
        print(dataType)
    else:
        jsonObj = getJsonObj(parsed_args.dataFile)
        if jsonObj is None:
            logging.warning("Nothing returned from parser")
            sys.exit(1)
        print(json.dumps(jsonObj))

# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == "__main__":
    main(sys.argv[1:])
