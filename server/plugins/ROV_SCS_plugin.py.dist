# =================================================================================== #
#
#         FILE:  SCS_plugin.py
#
#        USAGE:  SCS_plugin.py [-h] [--dataType] <dataFile>
#
#  DESCRIPTION:  This python script interprets raw files created by the SCS Data
#                Acquision System.  Depending on the command-line arguments, the script
#                returns the data type of the file or a sub-sampled and json-formatted
#                version of the original file to stdout.  The json-formatted file is
#                used by OpenVDM as part of it's Data dashboard. 
#
#      OPTIONS:  [-h] Return the help message.
#                [--dataType] Return the datatype of the file as defined in the
#                    fileTypeFilter array.
#                <dataFile> Full or relative path of the data file to process.
#
# REQUIREMENTS:  Python3.8
#                Python Modules:
#
#         BUGS:
#        NOTES:
#       AUTHOR:  Webb Pinner
#      COMPANY:  Capable Solutions
#      VERSION:  1.0
#      CREATED:  2016-10-23
#     REVISION:  2021-01-23
#
# LICENSE INFO:  Open Vessel Data Management 2.5 (OpenVDMv2)
#                Copyright (C) 2021 OceanDataRat.org
#
#    This program is free software: you can redistribute it and/or modify it under the
#    terms of the GNU General Public License as published by the Free Software
#    Foundation, either version 3 of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful, but WITHOUT ANY
#    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#    PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along with this
#    program.  If not, see <http://www.gnu.org/licenses/>.
#
# =================================================================================== #

import sys
import os
import json
import fnmatch
import requests
import argparse
import logging

from os.path import dirname, realpath
sys.path.append(dirname(dirname(dirname(realpath(__file__)))))

from server.lib.openvdm import OpenVDM_API
from server.lib.openvdm_plugin import OpenVDMPlugin
from server.plugins.parsers.gga_parser   import GGAParser
from server.plugins.parsers.sprint_parser   import SprintParser
from server.plugins.parsers.paro_parser   import ParoParser
from server.plugins.parsers.comp_pres_rov_parser import CompPresParser
from server.plugins.parsers.rov_ctd_parser   import ROV_CTDParser

SEALOG_SERVER_URL = 'http://localhost:8000/sealog-server'
SEALOG_JWT = ''

# -------------------------------------------------------------------------------------
# This array defines the various dataTypes collected by SCS and the cooresponding file
# regex expression.
# -------------------------------------------------------------------------------------
FILE_TYPE_FILTERS = [
    {"data_type":"rov-sprint",    "regex": "*/SUBASTIAN/UDP-SB-SPRINT-RAW_*.Raw",     "parser": "Sprint",   'parser_options':{}},
    {"data_type":"rov-paro",      "regex": "*/SUBASTIAN/UDP-SB-Paro-Depth-RAW_*.Raw", "parser": "Paro",     'parser_options':{}},
    {"data_type":"rov-ctd",       "regex": "*/SUBASTIAN/UDP-SB-CTD-RAW_*.Raw",        "parser": "CTD",      'parser_options':{}},
    {"data_type":"rov-comp-pres", "regex": "*/SUBASTIAN/UDP-SB-Mech-Comps-RAW_*.Raw", "parser": "CompPres", 'parser_options':{}},
    {"data_type":"rov-usbl-pri",  "regex": "*/SBNAV/UDP-SB-USBL-PRI-GGA-RAW_*.Raw",   "parser": "GGA",      'parser_options':{}},
    {"data_type":"rov-usbl-sec",  "regex": "*/SBNAV/UDP-SB-USBL-SEC-GGA-RAW_*.Raw",   "parser": "GGA",      'parser_options':{}},
]

# -------------------------------------------------------------------------------------
# Function to determine the datatype of the raw datafile.  If the datatype can not be
# determined, the function returns false
# -------------------------------------------------------------------------------------


class ROV_SCS_OpenVDMPlugin(OpenVDMPlugin):

    def __init__(self, lowering=None, use_sealog_api=True):

        self.sealog_server_url = SEALOG_SERVER_URL
        self.sealog_jwt = SEALOG_JWT
        self.openvdm = OpenVDM_API()
        self.lowering = lowering if lowering != None else self.openvdm.getLoweringID()
        self.use_sealog_api = use_sealog_api

        if self.use_sealog_api:
            lowering = self._get_sealog_lowering_by_id(self.lowering)
            try:
                self.start_dt = datetime.strptime(lowering['lowering_additional_meta']['milestones']['lowering_descending'], "%Y-%m-%dT%H:%M:%S.%fZ")  if lowering['lowering_additional_meta']['milestones']['lowering_descending'] else datetime.strptime(lowering.start_ts, "%Y-%m-%dT%H:%M:%S.%fZ")
                self.stop_dt = datetime.strptime(lowering['lowering_additional_meta']['milestones']['lowering_floats_on_surface'], "%Y-%m-%dT%H:%M:%S.%fZ")  if lowering['lowering_additional_meta']['milestones']['lowering_floats_on_surface'] else datetime.strptime(lowering.stop_ts, "%Y-%m-%dT%H:%M:%S.%fZ")
            except:
                logging.warning("Could not determine lowering start/stop datetime")
                self.start_dt = None
                self.stop_dt = None

        else:
            try:
                self.start_dt = datetime.strptime(self.openvdm.getLoweringStartDate(), "%Y-%m-%dT%H:%M:%S.%fZ")
            except:
                self.start_dt = None

            try:
                self.stop_dt = datetime.strptime(self.openvdm.getLoweringStopDate(), "%Y-%m-%dT%H:%M:%S.%fZ")
            except:
                self.stop_dt = None

        super().__init__(FILE_TYPE_FILTERS)


    # -------------------------------------------------------------------------------------
    # Function to determine the parser to use with the raw datafile.  If the datatype can
    # not be determined, the function returns false
    # -------------------------------------------------------------------------------------
    def get_parser(self, filePath):

        file_type_filter = list(filter(lambda file_type_filter: fnmatch.fnmatch(filePath, file_type_filter['regex']), self.file_type_filters))

        if len(file_type_filter) == 0:
            return None
        else:
            file_type_filter = file_type_filter[0]

        if file_type_filter['parser'] == "Sprint":
            return SprintParser(**file_type_filter['parser_options'])
        elif file_type_filter['parser'] == "Paro":
            return ParoParser(**file_type_filter['parser_options'])
        elif file_type_filter['parser'] == "CTD":
            return ROV_CTDParser(**file_type_filter['parser_options'])
        elif file_type_filter['parser'] == "CompPres":
            return CompPresParser(**file_type_filter['parser_options'])
        elif file_type_filter['parser'] == "GGA":
            return GGAParser(**file_type_filter['parser_options'])
        else:
            return None


    # -------------------------------------------------------------------------------------
    #
    # -------------------------------------------------------------------------------------
    def _get_sealog_lowering_by_id(self, lowering_id):

        try:
            url = self.sealog_server_url + '/api/v1/lowerings?lowering_id=' + lowering_id
            r = requests.get(url, headers={"authorization": self.sealog_jwt})
            lowering = json.loads(r.text)[0]
            return lowering
        except Exception as error:
            logging.warning("Lowering {} not found in Sealog".format(lowering_id))
            logging.debug(str(error))

        return None

# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='OpenVDM plugin for ROV_SCS')
    parser.add_argument('--dataType', action='store_true',
                        help='return the dataType of the file')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('--lowering', dest='lowering',
                        default=None, help='lowering to use with the datafile')
    parser.add_argument('dataFile', metavar='dataFile',
                        help='the raw data file to process')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).
    
    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    if not os.path.isfile(parsed_args.dataFile):
        logging.error("File not found")
        sys.exit(1)
    elif os.stat(parsed_args.dataFile).st_size == 0:
        logging.warning("File is empty")
        sys.exit(0)

    plugin = ROV_SCS_OpenVDMPlugin(lowering=parsed_args.lowering)

    if parsed_args.dataType:
        dataType = plugin.get_data_type(parsed_args.dataFile)
        if dataType is None:
            logging.warning("File is of unknown type")
            sys.exit(1)
        print(dataType)
    else:
        jsonSTR = plugin.get_json_str(parsed_args.dataFile)
        if jsonSTR is None:
            logging.warning("Nothing returned from parser")
            sys.exit(1)
        print(jsonSTR)
