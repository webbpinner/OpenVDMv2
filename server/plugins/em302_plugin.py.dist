#!/usr/bin/env python3
"""
FILE:  em302_plugin.py

USAGE:  em302_plugin.py [-h] [--dataType] <dataFile>

DESCRIPTION:  This python script interprets raw files created by the SCS Data
    Acquision System.  Depending on the command-line arguments, the script
    returns the data type of the file or a sub-sampled and json-formatted
    version of the original file to stdout.  The json-formatted file is used
    by OpenVDM as part of it's Data dashboard.

  OPTIONS:  [-h] Return the help message.
            [--dataType] Return the datatype of the file as defined in the
                fileTypeFilter array.
            <dataFile> Full or relative path of the data file to process.

REQUIREMENTS:  Python3.8

     BUGS:
    NOTES:
   AUTHOR:  Webb Pinner
  COMPANY:  Capable Solutions
  VERSION:  1.0
  CREATED:  2016-10-23
 REVISION:  2021-01-23

LICENSE INFO:  Open Vessel Data Management 2.5 (OpenVDMv2)
Copyright (C) 2021 OceanDataRat.org

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this
program.  If not, see <http://www.gnu.org/licenses/>.

"""

import sys
import os
import fnmatch
import argparse
import logging

from os.path import dirname, realpath
sys.path.append(dirname(dirname(dirname(realpath(__file__)))))

from server.lib.openvdm_plugin import OpenVDMPlugin
from server.plugins.parsers.geotiff_parser import GeoTIFFParser

# -------------------------------------------------------------------------------------
# This array defines the various dataTypes collected by SCS and the cooresponding file
# regex expression.
# -------------------------------------------------------------------------------------
FILE_TYPE_FILTERS = [
    {"data_type":"geotiff",   "regex": "*.tif",   "parser": "GeoTIFF",   "parser_options":{}}
]


class EM302Plugin(OpenVDMPlugin):
    """
    OpenVDM plugin for the EM302 MBES
    """

    def __init__(self):
        super().__init__(FILE_TYPE_FILTERS)


    def get_parser(self, filepath):
        """
        Function to determine the parser to use with the raw datafile.  If the
        datatype cannot be determined, the function returns false
        """

        file_type_filter = list(filter(lambda file_type_filter: fnmatch.fnmatch(filepath, file_type_filter['regex']), self.file_type_filters))

        if len(file_type_filter) == 0:
            return None

        file_type_filter = file_type_filter[0]

        if file_type_filter['parser'] == "GeoTIFF":
            return GeoTIFFParser(**file_type_filter['parser_options'])

        return None


# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='OpenVDM plugin for EM302')
    parser.add_argument('--dataType', action='store_true',
                        help='return the dataType of the file')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('dataFile', metavar='dataFile',
                        help='the raw data file to process')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).
    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    if not os.path.isfile(parsed_args.dataFile):
        logging.error("File not found")
        sys.exit(1)
    elif os.stat(parsed_args.dataFile).st_size == 0:
        logging.warning("File is empty")
        sys.exit(0)

    plugin = EM302Plugin()

    if parsed_args.dataType:
        dataType = plugin.get_data_type(parsed_args.dataFile)
        if dataType is None:
            logging.warning("File is of unknown type")
            sys.exit(1)
        print(dataType)
    else:
        jsonSTR = plugin.get_json_str(parsed_args.dataFile)
        if jsonSTR is None:
            logging.warning("Nothing returned from parser")
            sys.exit(1)
        print(jsonSTR)
